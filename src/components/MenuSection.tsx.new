import React, { useState } from 'react';
import { menuData, categories } from '../data/menuData';
import { MenuItem } from '../types';

const MenuSection: React.FC = () => {
  const [activeCategory, setActiveCategory] = useState("Manager's Picks");
  const [showBuildInfo, setShowBuildInfo] = useState(false);
  const [showWingsFlavors, setShowWingsFlavors] = useState(false);

  const getDietaryBadge = (dietary: string) => {
    const badges = {
      'V': { label: 'Vegetarian', color: 'bg-green-100 text-green-800' },
      'VE': { label: 'Vegan', color: 'bg-green-100 text-green-800' },
      'GF': { label: 'Gluten Free', color: 'bg-blue-100 text-blue-800' },
      'Halal': { label: 'Halal', color: 'bg-purple-100 text-purple-800' }
    };
    return badges[dietary as keyof typeof badges] || { label: dietary, color: 'bg-gray-100 text-gray-800' };
  };

  const filteredItems = menuData.filter(item => item.category === activeCategory);

  return (
    <section id="menu" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-4xl md:text-5xl font-bold text-gray-900 mb-4">Our Menu</h2>
          <p className="text-xl text-gray-600 max-w-2xl mx-auto">
            From Indian-inspired fusion pizzas to classic favorites, discover flavors that bring people together
          </p>
        </div>

        {/* Category Navigation */}
        <div className="mb-12">
          <div className="flex flex-wrap justify-center gap-2 md:gap-4">
            {categories.map((category) => (
              <button
                key={category}
                onClick={() => setActiveCategory(category)}
                className={`px-4 py-2 rounded-full text-sm font-medium transition-all duration-300 ${
                  activeCategory === category
                    ? 'bg-red-600 text-white shadow-lg'
                    : 'bg-white text-gray-700 hover:bg-red-50 hover:text-red-600 border border-gray-200'
                }`}
              >
                {category}
              </button>
            ))}
          </div>
        </div>

        {/* Show a single See All Flavors button above the wings grid if category is Wings */}
        {activeCategory === 'Wings' && (
          <div className="flex justify-center mb-6">
            <button
              className="bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-full text-sm font-semibold transition-all duration-300"
              onClick={() => setShowWingsFlavors(true)}
            >
              See All Flavors
            </button>
          </div>
        )}

        <div className="grid md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
          {filteredItems.map((item) => (
            <div key={item.id} className="bg-white rounded-2xl shadow-lg overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1">
              <div className="relative">
                <img
                  src={item.image}
                  alt={item.name}
                  className="w-full h-48 object-cover"
                />
                <div className="absolute top-4 left-4 flex flex-wrap gap-1">
                  {(item.dietary && item.dietary.length > 0)
                    ? item.dietary.map((diet) => {
                        const badge = getDietaryBadge(diet);
                        return (
                          <span
                            key={diet}
                            className={`text-xs px-2 py-1 rounded-full font-medium ${badge.color}`}
                          >
                            {badge.label}
                          </span>
                        );
                      })
                    : null}
                </div>
              </div>

              <div className="p-6">
                <h3 className="text-xl font-bold text-gray-900 mb-2">{item.name}</h3>
                <p className="text-gray-600 mb-4 text-sm leading-relaxed">{item.description}</p>
                <div className="text-2xl font-bold text-red-600">
                  {item.sizes && item.sizes.length > 0
                    ? `$${item.sizes[0].price.toFixed(2)}`
                    : (typeof item.price === 'number' ? `$${item.price.toFixed(2)}` : '')}
                </div>
                {/* Show options button for Build Your Own Pizza */}
                {item.name === 'Build Your Own Pizza' && (
                  <button
                    className="mt-4 bg-gray-200 hover:bg-gray-300 text-gray-800 px-4 py-2 rounded-full text-sm font-semibold transition-all duration-300"
                    onClick={() => setShowBuildInfo(true)}
                  >
                    See All Options
                  </button>
                )}
              </div>
            </div>
          ))}
        </div>

        {/* Wings Flavors Modal */}
        {showWingsFlavors && activeCategory === 'Wings' && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md relative">
              <button className="absolute top-4 right-4 text-gray-400 hover:text-gray-700 text-2xl" onClick={() => setShowWingsFlavors(false)}>&times;</button>
              <h2 className="text-2xl font-bold mb-4 text-gray-900">Wings Flavors</h2>
              <ul className="list-disc pl-6 text-gray-800">
                {[...new Set(menuData.filter(i => i.category === 'Wings' && i.flavors).flatMap(i => i.flavors!))].map((flavor) => (
                  <li key={flavor} className="mb-1">{flavor}</li>
                ))}
              </ul>
              <div className="text-gray-500 text-sm mt-4">Choose any flavor for your wings order!</div>
            </div>
          </div>
        )}

        {/* Build Your Own Pizza Info Modal */}
        {showBuildInfo && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-lg relative">
              <button className="absolute top-4 right-4 text-gray-400 hover:text-gray-700 text-2xl" onClick={() => setShowBuildInfo(false)}>&times;</button>
              <h2 className="text-2xl font-bold mb-4 text-gray-900">Build Your Own Pizza - Options</h2>
              <div className="mb-3">
                <span className="font-semibold">Sizes:</span> Small (10"), Medium (12"), Large (14"), XL (16")
              </div>
              <div className="mb-3">
                <span className="font-semibold">Crusts:</span> Regular, Skinny
              </div>
              <div className="mb-3">
                <span className="font-semibold">Sauces:</span> Red, Garlic, Sweet Chili, BBQ, Pesto
              </div>
              <div className="mb-3">
                <span className="font-semibold">Toppings:</span> Pepperoni, Sausage, Bacon, Chicken, Ham, Beef, Mushrooms, Onions, Peppers, Olives, Spinach, Tomatoes, Jalapenos, Mozzarella, Cheddar, Parmesan, Feta, Goat Cheese
              </div>
              <div className="text-gray-500 text-sm mt-4">Choose any combination to create your perfect pizza!</div>
            </div>
          </div>
        )}

        {filteredItems.length === 0 && (
          <div className="text-center py-16">
            <h3 className="text-xl font-semibold text-gray-600 mb-2">Coming Soon!</h3>
            <p className="text-gray-500">We're working on adding items to this category.</p>
          </div>
        )}
      </div>
    </section>
  );
}

export default MenuSection;
